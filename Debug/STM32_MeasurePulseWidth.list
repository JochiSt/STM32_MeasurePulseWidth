
STM32_MeasurePulseWidth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003520  08003520  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003520  08003520  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003520  08003520  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003534  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003534  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093f1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b38  00000000  00000000  00029426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e45  00000000  00000000  0002c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc39  00000000  00000000  0004310d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084343  00000000  00000000  0004ed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000d30dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c8 	.word	0x080034c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080034c8 	.word	0x080034c8

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 fc5f 	bl	8000a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 fc78 	bl	8000a6a <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <MX_GPIO_Init+0x40>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0320 	and.w	r3, r3, #32
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001ac:	f043 0308 	orr.w	r3, r3, #8
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	f003 0308 	and.w	r3, r3, #8
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	683b      	ldr	r3, [r7, #0]

}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 faf5 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f827 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f7ff ffd5 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80001de:	f7ff ffb5 	bl	800014c <MX_DMA_Init>
  MX_TIM4_Init();
 80001e2:	f000 f951 	bl	8000488 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // start PWM input measurement
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 80001e6:	2100      	movs	r1, #0
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <main+0x50>)
 80001ea:	f002 f849 	bl	8002280 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);      // indirect channel
 80001ee:	2104      	movs	r1, #4
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <main+0x50>)
 80001f2:	f001 ff85 	bl	8002100 <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    // send out the Manchester Coding data
    char man_str[10] = "HalloWelt";
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x54>)
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80001fc:	c303      	stmia	r3!, {r0, r1}
 80001fe:	801a      	strh	r2, [r3, #0]
    sendManchester(man_str, 10);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	210a      	movs	r1, #10
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f859 	bl	80002bc <sendManchester>

    while (!datasentflag){};
 800020a:	bf00      	nop
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <main+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0fb      	beq.n	800020c <main+0x40>
    datasentflag = 0;
 8000214:	4b03      	ldr	r3, [pc, #12]	; (8000224 <main+0x58>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
  {
 800021a:	e7ec      	b.n	80001f6 <main+0x2a>
 800021c:	20000138 	.word	0x20000138
 8000220:	080034e0 	.word	0x080034e0
 8000224:	200001c4 	.word	0x200001c4

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f93e 	bl	80034b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 ffff 	bl	8001274 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f819 	bl	80002b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fa6c 	bl	8001778 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f804 	bl	80002b2 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b6:	b672      	cpsid	i
}
 80002b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ba:	e7fe      	b.n	80002ba <Error_Handler+0x8>

080002bc <sendManchester>:
#define MAN_HEADER_LEN  8
const pwm_t MAN_HEADER[MAN_HEADER_LEN] = {0, PWM_MAX_CNT, 0, PWM_MAX_CNT, 0, PWM_MAX_CNT, 0, PWM_MAX_CNT};

pwm_t MAN_DATA[MAX_STRING_LENGTH * 2*8 + 2*MAN_HEADER_LEN];

void sendManchester(char* str, uint8_t len){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]

  uint8_t manidx = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]

  // first apply header
  for(uint8_t manbitidx=0; manbitidx<MAN_HEADER_LEN; manbitidx++){
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	e00b      	b.n	80002ea <sendManchester+0x2e>
    MAN_DATA[manidx] = MAN_HEADER[manbitidx];
 80002d2:	7bba      	ldrb	r2, [r7, #14]
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	493a      	ldr	r1, [pc, #232]	; (80003c0 <sendManchester+0x104>)
 80002d8:	5c89      	ldrb	r1, [r1, r2]
 80002da:	4a3a      	ldr	r2, [pc, #232]	; (80003c4 <sendManchester+0x108>)
 80002dc:	54d1      	strb	r1, [r2, r3]
    manidx++;
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	3301      	adds	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
  for(uint8_t manbitidx=0; manbitidx<MAN_HEADER_LEN; manbitidx++){
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	3301      	adds	r3, #1
 80002e8:	73bb      	strb	r3, [r7, #14]
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	d9f0      	bls.n	80002d2 <sendManchester+0x16>
  }

  // translate bytes into bits
  for(uint8_t charidx=0; charidx<len; charidx++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	737b      	strb	r3, [r7, #13]
 80002f4:	e042      	b.n	800037c <sendManchester+0xc0>
    for(uint8_t bitidx=0; bitidx<8; bitidx++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	733b      	strb	r3, [r7, #12]
 80002fa:	e039      	b.n	8000370 <sendManchester+0xb4>
      uint8_t man_TXbit = ( str[charidx] & (1<< bitidx) ) >> bitidx;
 80002fc:	7b7b      	ldrb	r3, [r7, #13]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	7b3b      	ldrb	r3, [r7, #12]
 8000308:	2201      	movs	r2, #1
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	ea01 0203 	and.w	r2, r1, r3
 8000312:	7b3b      	ldrb	r3, [r7, #12]
 8000314:	fa42 f303 	asr.w	r3, r2, r3
 8000318:	723b      	strb	r3, [r7, #8]

      if(man_TXbit){
 800031a:	7a3b      	ldrb	r3, [r7, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d012      	beq.n	8000346 <sendManchester+0x8a>
        for(uint8_t manbitidx=0; manbitidx<2; manbitidx++){
 8000320:	2300      	movs	r3, #0
 8000322:	72fb      	strb	r3, [r7, #11]
 8000324:	e00b      	b.n	800033e <sendManchester+0x82>
          MAN_DATA[manidx] = MAN_ONE[manbitidx];
 8000326:	7afa      	ldrb	r2, [r7, #11]
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	4927      	ldr	r1, [pc, #156]	; (80003c8 <sendManchester+0x10c>)
 800032c:	5c89      	ldrb	r1, [r1, r2]
 800032e:	4a25      	ldr	r2, [pc, #148]	; (80003c4 <sendManchester+0x108>)
 8000330:	54d1      	strb	r1, [r2, r3]
          manidx++;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	3301      	adds	r3, #1
 8000336:	73fb      	strb	r3, [r7, #15]
        for(uint8_t manbitidx=0; manbitidx<2; manbitidx++){
 8000338:	7afb      	ldrb	r3, [r7, #11]
 800033a:	3301      	adds	r3, #1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d9f0      	bls.n	8000326 <sendManchester+0x6a>
 8000344:	e011      	b.n	800036a <sendManchester+0xae>
        }
      }else{
        for(uint8_t manbitidx=0; manbitidx<2; manbitidx++){
 8000346:	2300      	movs	r3, #0
 8000348:	72bb      	strb	r3, [r7, #10]
 800034a:	e00b      	b.n	8000364 <sendManchester+0xa8>
          MAN_DATA[manidx] = MAN_ZERO[manbitidx];
 800034c:	7aba      	ldrb	r2, [r7, #10]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	491e      	ldr	r1, [pc, #120]	; (80003cc <sendManchester+0x110>)
 8000352:	5c89      	ldrb	r1, [r1, r2]
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <sendManchester+0x108>)
 8000356:	54d1      	strb	r1, [r2, r3]
          manidx++;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	3301      	adds	r3, #1
 800035c:	73fb      	strb	r3, [r7, #15]
        for(uint8_t manbitidx=0; manbitidx<2; manbitidx++){
 800035e:	7abb      	ldrb	r3, [r7, #10]
 8000360:	3301      	adds	r3, #1
 8000362:	72bb      	strb	r3, [r7, #10]
 8000364:	7abb      	ldrb	r3, [r7, #10]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d9f0      	bls.n	800034c <sendManchester+0x90>
    for(uint8_t bitidx=0; bitidx<8; bitidx++){
 800036a:	7b3b      	ldrb	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	733b      	strb	r3, [r7, #12]
 8000370:	7b3b      	ldrb	r3, [r7, #12]
 8000372:	2b07      	cmp	r3, #7
 8000374:	d9c2      	bls.n	80002fc <sendManchester+0x40>
  for(uint8_t charidx=0; charidx<len; charidx++){
 8000376:	7b7b      	ldrb	r3, [r7, #13]
 8000378:	3301      	adds	r3, #1
 800037a:	737b      	strb	r3, [r7, #13]
 800037c:	7b7a      	ldrb	r2, [r7, #13]
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	429a      	cmp	r2, r3
 8000382:	d3b8      	bcc.n	80002f6 <sendManchester+0x3a>
      }
    }
  }

  // apply a trailer
  for(uint8_t manbitidx=0; manbitidx<MAN_HEADER_LEN; manbitidx++){
 8000384:	2300      	movs	r3, #0
 8000386:	727b      	strb	r3, [r7, #9]
 8000388:	e00b      	b.n	80003a2 <sendManchester+0xe6>
    MAN_DATA[manidx] = MAN_HEADER[manbitidx];
 800038a:	7a7a      	ldrb	r2, [r7, #9]
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	490c      	ldr	r1, [pc, #48]	; (80003c0 <sendManchester+0x104>)
 8000390:	5c89      	ldrb	r1, [r1, r2]
 8000392:	4a0c      	ldr	r2, [pc, #48]	; (80003c4 <sendManchester+0x108>)
 8000394:	54d1      	strb	r1, [r2, r3]
    manidx++;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	3301      	adds	r3, #1
 800039a:	73fb      	strb	r3, [r7, #15]
  for(uint8_t manbitidx=0; manbitidx<MAN_HEADER_LEN; manbitidx++){
 800039c:	7a7b      	ldrb	r3, [r7, #9]
 800039e:	3301      	adds	r3, #1
 80003a0:	727b      	strb	r3, [r7, #9]
 80003a2:	7a7b      	ldrb	r3, [r7, #9]
 80003a4:	2b07      	cmp	r3, #7
 80003a6:	d9f0      	bls.n	800038a <sendManchester+0xce>
  }

  // finally scale all values to the right value
  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_4, (uint32_t *)MAN_DATA, manidx);
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <sendManchester+0x108>)
 80003ae:	210c      	movs	r1, #12
 80003b0:	4807      	ldr	r0, [pc, #28]	; (80003d0 <sendManchester+0x114>)
 80003b2:	f001 fbe5 	bl	8001b80 <HAL_TIM_PWM_Start_DMA>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	080034f4 	.word	0x080034f4
 80003c4:	20000028 	.word	0x20000028
 80003c8:	080034ec 	.word	0x080034ec
 80003cc:	080034f0 	.word	0x080034f0
 80003d0:	20000138 	.word	0x20000138

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_MspInit+0x40>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <HAL_MspInit+0x40>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_MspInit+0x40>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HAL_MspInit+0x40>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_MspInit+0x40>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_MspInit+0x40>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler+0x4>

0800041e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <MemManage_Handler+0x4>

0800042a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler+0x4>

08000436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f9f5 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <DMA1_Channel5_IRQHandler+0x10>)
 800046e:	f000 fc49 	bl	8000d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000180 	.word	0x20000180

0800047c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b096      	sub	sp, #88	; 0x58
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800049c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004d6:	4b4d      	ldr	r3, [pc, #308]	; (800060c <MX_TIM4_Init+0x184>)
 80004d8:	4a4d      	ldr	r2, [pc, #308]	; (8000610 <MX_TIM4_Init+0x188>)
 80004da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004dc:	4b4b      	ldr	r3, [pc, #300]	; (800060c <MX_TIM4_Init+0x184>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	4b4a      	ldr	r3, [pc, #296]	; (800060c <MX_TIM4_Init+0x184>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200;
 80004e8:	4b48      	ldr	r3, [pc, #288]	; (800060c <MX_TIM4_Init+0x184>)
 80004ea:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80004ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b46      	ldr	r3, [pc, #280]	; (800060c <MX_TIM4_Init+0x184>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f6:	4b45      	ldr	r3, [pc, #276]	; (800060c <MX_TIM4_Init+0x184>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004fc:	4843      	ldr	r0, [pc, #268]	; (800060c <MX_TIM4_Init+0x184>)
 80004fe:	f001 fa97 	bl	8001a30 <HAL_TIM_Base_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000508:	f7ff fed3 	bl	80002b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800050c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000510:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000516:	4619      	mov	r1, r3
 8000518:	483c      	ldr	r0, [pc, #240]	; (800060c <MX_TIM4_Init+0x184>)
 800051a:	f002 f91b 	bl	8002754 <HAL_TIM_ConfigClockSource>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000524:	f7ff fec5 	bl	80002b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000528:	4838      	ldr	r0, [pc, #224]	; (800060c <MX_TIM4_Init+0x184>)
 800052a:	f001 fad0 	bl	8001ace <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000534:	f7ff febd 	bl	80002b2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000538:	4834      	ldr	r0, [pc, #208]	; (800060c <MX_TIM4_Init+0x184>)
 800053a:	f001 fd89 	bl	8002050 <HAL_TIM_IC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8000544:	f7ff feb5 	bl	80002b2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000548:	2304      	movs	r3, #4
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800054c:	2350      	movs	r3, #80	; 0x50
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerFilter = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800055c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000560:	4619      	mov	r1, r3
 8000562:	482a      	ldr	r0, [pc, #168]	; (800060c <MX_TIM4_Init+0x184>)
 8000564:	f002 f9bd 	bl	80028e2 <HAL_TIM_SlaveConfigSynchro>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800056e:	f7ff fea0 	bl	80002b2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000576:	2301      	movs	r3, #1
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	4820      	ldr	r0, [pc, #128]	; (800060c <MX_TIM4_Init+0x184>)
 800058c:	f001 ff84 	bl	8002498 <HAL_TIM_IC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000596:	f7ff fe8c 	bl	80002b2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800059a:	2302      	movs	r3, #2
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80005a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a6:	2204      	movs	r2, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <MX_TIM4_Init+0x184>)
 80005ac:	f001 ff74 	bl	8002498 <HAL_TIM_IC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM4_Init+0x132>
  {
    Error_Handler();
 80005b6:	f7ff fe7c 	bl	80002b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <MX_TIM4_Init+0x184>)
 80005ca:	f002 fef3 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM4_Init+0x150>
  {
    Error_Handler();
 80005d4:	f7ff fe6d 	bl	80002b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d8:	2360      	movs	r3, #96	; 0x60
 80005da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2208      	movs	r2, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <MX_TIM4_Init+0x184>)
 80005f0:	f001 ffee 	bl	80025d0 <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM4_Init+0x176>
  {
    Error_Handler();
 80005fa:	f7ff fe5a 	bl	80002b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <MX_TIM4_Init+0x184>)
 8000600:	f000 f872 	bl	80006e8 <HAL_TIM_MspPostInit>

}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	; 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000138 	.word	0x20000138
 8000610:	40000800 	.word	0x40000800

08000614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM4)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <HAL_TIM_Base_MspInit+0xc0>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d14b      	bne.n	80006cc <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	61d3      	str	r3, [r2, #28]
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <HAL_TIM_Base_MspInit+0xc4>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <HAL_TIM_Base_MspInit+0xc8>)
 8000678:	f000 fc78 	bl	8000f6c <HAL_GPIO_Init>

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Channel5;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <HAL_TIM_Base_MspInit+0xd0>)
 8000680:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 8000684:	2210      	movs	r2, #16
 8000686:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 8000696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 800069e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 80006b2:	f000 f9f5 	bl	8000aa0 <HAL_DMA_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_TIM_Base_MspInit+0xac>
    {
      Error_Handler();
 80006bc:	f7ff fdf9 	bl	80002b2 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_TIM_Base_MspInit+0xcc>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40000800 	.word	0x40000800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	20000180 	.word	0x20000180
 80006e4:	40020058 	.word	0x40020058

080006e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_TIM_MspPostInit+0x5c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d118      	bne.n	800073a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_TIM_MspPostInit+0x60>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_TIM_MspPostInit+0x60>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_TIM_MspPostInit+0x60>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2302      	movs	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_TIM_MspPostInit+0x64>)
 8000736:	f000 fc19 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40000800 	.word	0x40000800
 8000748:	40021000 	.word	0x40021000
 800074c:	40010c00 	.word	0x40010c00

08000750 <HAL_TIM_PWM_PulseFinishedCallback>:
}

uint8_t datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f001 fbb2 	bl	8001ec4 <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001c4 	.word	0x200001c4

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff fe82 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077a:	490c      	ldr	r1, [pc, #48]	; (80007ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000790:	4c09      	ldr	r4, [pc, #36]	; (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 fe67 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fd13 	bl	80001cc <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b0:	08003528 	.word	0x08003528
  ldr r2, =_sbss
 80007b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b8:	200001cc 	.word	0x200001cc

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f923 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fdfa 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f93b 	bl	8000a86 <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f903 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <HAL_IncTick+0x20>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000008 	.word	0x20000008
 800086c:	200001c8 	.word	0x200001c8

08000870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	200001c8 	.word	0x200001c8

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <__NVIC_EnableIRQ+0x34>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff90 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff2d 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff42 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5f 	bl	8000920 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff35 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffa2 	bl	80009d8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e043      	b.n	8000b3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_DMA_Init+0xa8>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_DMA_Init+0xac>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	009a      	lsls	r2, r3, #2
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <HAL_DMA_Init+0xb0>)
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000aea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000aee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	bffdfff8 	.word	0xbffdfff8
 8000b4c:	cccccccd 	.word	0xcccccccd
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <HAL_DMA_Start_IT+0x20>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e04b      	b.n	8000c0c <HAL_DMA_Start_IT+0xb8>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d13a      	bne.n	8000bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0201 	bic.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 f9af 	bl	8000f10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f042 020e 	orr.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e00f      	b.n	8000bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0204 	bic.w	r2, r2, #4
 8000bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 020a 	orr.w	r2, r2, #10
 8000bea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0201 	orr.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e005      	b.n	8000c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c06:	2302      	movs	r3, #2
 8000c08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d005      	beq.n	8000c38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2204      	movs	r2, #4
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e051      	b.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 020e 	bic.w	r2, r2, #14
 8000c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_DMA_Abort_IT+0xd4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d029      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xa2>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_DMA_Abort_IT+0xd8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d022      	beq.n	8000cb2 <HAL_DMA_Abort_IT+0x9e>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_DMA_Abort_IT+0xdc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01a      	beq.n	8000cac <HAL_DMA_Abort_IT+0x98>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_DMA_Abort_IT+0xe0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d012      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x92>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_DMA_Abort_IT+0xe4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00a      	beq.n	8000ca0 <HAL_DMA_Abort_IT+0x8c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <HAL_DMA_Abort_IT+0xe8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d102      	bne.n	8000c9a <HAL_DMA_Abort_IT+0x86>
 8000c94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c98:	e00e      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9e:	e00b      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	e008      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	e005      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb0:	e002      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	e000      	b.n	8000cb8 <HAL_DMA_Abort_IT+0xa4>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <HAL_DMA_Abort_IT+0xec>)
 8000cba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	4798      	blx	r3
    } 
  }
  return status;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40020008 	.word	0x40020008
 8000cec:	4002001c 	.word	0x4002001c
 8000cf0:	40020030 	.word	0x40020030
 8000cf4:	40020044 	.word	0x40020044
 8000cf8:	40020058 	.word	0x40020058
 8000cfc:	4002006c 	.word	0x4002006c
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	2204      	movs	r2, #4
 8000d22:	409a      	lsls	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d04f      	beq.n	8000dcc <HAL_DMA_IRQHandler+0xc8>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d04a      	beq.n	8000dcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d107      	bne.n	8000d54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0204 	bic.w	r2, r2, #4
 8000d52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d029      	beq.n	8000db2 <HAL_DMA_IRQHandler+0xae>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d022      	beq.n	8000dae <HAL_DMA_IRQHandler+0xaa>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a63      	ldr	r2, [pc, #396]	; (8000efc <HAL_DMA_IRQHandler+0x1f8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01a      	beq.n	8000da8 <HAL_DMA_IRQHandler+0xa4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a62      	ldr	r2, [pc, #392]	; (8000f00 <HAL_DMA_IRQHandler+0x1fc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d012      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x9e>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a60      	ldr	r2, [pc, #384]	; (8000f04 <HAL_DMA_IRQHandler+0x200>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00a      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x98>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_DMA_IRQHandler+0x204>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d102      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x92>
 8000d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d94:	e00e      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000d96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d9a:	e00b      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000d9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000da0:	e008      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da6:	e005      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	e002      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0xb0>
 8000db2:	2304      	movs	r3, #4
 8000db4:	4a55      	ldr	r2, [pc, #340]	; (8000f0c <HAL_DMA_IRQHandler+0x208>)
 8000db6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 8094 	beq.w	8000eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000dca:	e08e      	b.n	8000eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d056      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x186>
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d051      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10b      	bne.n	8000e0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 020a 	bic.w	r2, r2, #10
 8000e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d029      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x166>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a37      	ldr	r2, [pc, #220]	; (8000ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d022      	beq.n	8000e66 <HAL_DMA_IRQHandler+0x162>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a35      	ldr	r2, [pc, #212]	; (8000efc <HAL_DMA_IRQHandler+0x1f8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01a      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x15c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <HAL_DMA_IRQHandler+0x1fc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d012      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x156>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <HAL_DMA_IRQHandler+0x200>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00a      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x150>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_DMA_IRQHandler+0x204>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d102      	bne.n	8000e4e <HAL_DMA_IRQHandler+0x14a>
 8000e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e4c:	e00e      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e52:	e00b      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e58:	e008      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5e:	e005      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e64:	e002      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e66:	2320      	movs	r3, #32
 8000e68:	e000      	b.n	8000e6c <HAL_DMA_IRQHandler+0x168>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_DMA_IRQHandler+0x208>)
 8000e6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d034      	beq.n	8000eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e88:	e02f      	b.n	8000eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2208      	movs	r2, #8
 8000e90:	409a      	lsls	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d028      	beq.n	8000eec <HAL_DMA_IRQHandler+0x1e8>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020e 	bic.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	4798      	blx	r3
    }
  }
  return;
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
}
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40020008 	.word	0x40020008
 8000ef8:	4002001c 	.word	0x4002001c
 8000efc:	40020030 	.word	0x40020030
 8000f00:	40020044 	.word	0x40020044
 8000f04:	40020058 	.word	0x40020058
 8000f08:	4002006c 	.word	0x4002006c
 8000f0c:	40020000 	.word	0x40020000

08000f10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b10      	cmp	r3, #16
 8000f3c:	d108      	bne.n	8000f50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f4e:	e007      	b.n	8000f60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e169      	b.n	8001254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f80:	2201      	movs	r2, #1
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8158 	bne.w	800124e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4a9a      	ldr	r2, [pc, #616]	; (800120c <HAL_GPIO_Init+0x2a0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d05e      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a98      	ldr	r2, [pc, #608]	; (800120c <HAL_GPIO_Init+0x2a0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d875      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fae:	4a98      	ldr	r2, [pc, #608]	; (8001210 <HAL_GPIO_Init+0x2a4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d058      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a96      	ldr	r2, [pc, #600]	; (8001210 <HAL_GPIO_Init+0x2a4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d86f      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fba:	4a96      	ldr	r2, [pc, #600]	; (8001214 <HAL_GPIO_Init+0x2a8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d052      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fc0:	4a94      	ldr	r2, [pc, #592]	; (8001214 <HAL_GPIO_Init+0x2a8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d869      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fc6:	4a94      	ldr	r2, [pc, #592]	; (8001218 <HAL_GPIO_Init+0x2ac>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d04c      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fcc:	4a92      	ldr	r2, [pc, #584]	; (8001218 <HAL_GPIO_Init+0x2ac>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d863      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fd2:	4a92      	ldr	r2, [pc, #584]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d046      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a90      	ldr	r2, [pc, #576]	; (800121c <HAL_GPIO_Init+0x2b0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d85d      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d82a      	bhi.n	8001038 <HAL_GPIO_Init+0xcc>
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d859      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fe6:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <HAL_GPIO_Init+0x80>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	08001067 	.word	0x08001067
 8000ff0:	08001041 	.word	0x08001041
 8000ff4:	08001053 	.word	0x08001053
 8000ff8:	08001095 	.word	0x08001095
 8000ffc:	0800109b 	.word	0x0800109b
 8001000:	0800109b 	.word	0x0800109b
 8001004:	0800109b 	.word	0x0800109b
 8001008:	0800109b 	.word	0x0800109b
 800100c:	0800109b 	.word	0x0800109b
 8001010:	0800109b 	.word	0x0800109b
 8001014:	0800109b 	.word	0x0800109b
 8001018:	0800109b 	.word	0x0800109b
 800101c:	0800109b 	.word	0x0800109b
 8001020:	0800109b 	.word	0x0800109b
 8001024:	0800109b 	.word	0x0800109b
 8001028:	0800109b 	.word	0x0800109b
 800102c:	0800109b 	.word	0x0800109b
 8001030:	08001049 	.word	0x08001049
 8001034:	0800105d 	.word	0x0800105d
 8001038:	4a79      	ldr	r2, [pc, #484]	; (8001220 <HAL_GPIO_Init+0x2b4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103e:	e02c      	b.n	800109a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	623b      	str	r3, [r7, #32]
          break;
 8001046:	e029      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	3304      	adds	r3, #4
 800104e:	623b      	str	r3, [r7, #32]
          break;
 8001050:	e024      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	3308      	adds	r3, #8
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e01f      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	330c      	adds	r3, #12
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e01a      	b.n	800109c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106e:	2304      	movs	r3, #4
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e013      	b.n	800109c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d105      	bne.n	8001088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	611a      	str	r2, [r3, #16]
          break;
 8001086:	e009      	b.n	800109c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	615a      	str	r2, [r3, #20]
          break;
 8001092:	e003      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x130>
          break;
 800109a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2bff      	cmp	r3, #255	; 0xff
 80010a0:	d801      	bhi.n	80010a6 <HAL_GPIO_Init+0x13a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_Init+0x13e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2bff      	cmp	r3, #255	; 0xff
 80010b0:	d802      	bhi.n	80010b8 <HAL_GPIO_Init+0x14c>
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x152>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	3b08      	subs	r3, #8
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	210f      	movs	r1, #15
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	6a39      	ldr	r1, [r7, #32]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	431a      	orrs	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80b1 	beq.w	800124e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x2b8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x2b8>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <HAL_GPIO_Init+0x2b8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001104:	4a48      	ldr	r2, [pc, #288]	; (8001228 <HAL_GPIO_Init+0x2bc>)
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a40      	ldr	r2, [pc, #256]	; (800122c <HAL_GPIO_Init+0x2c0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d013      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3f      	ldr	r2, [pc, #252]	; (8001230 <HAL_GPIO_Init+0x2c4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d00d      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <HAL_GPIO_Init+0x2c8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <HAL_GPIO_Init+0x2cc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_GPIO_Init+0x1e0>
 8001148:	2303      	movs	r3, #3
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 800114c:	2304      	movs	r3, #4
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001158:	2300      	movs	r3, #0
 800115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800116a:	492f      	ldr	r1, [pc, #188]	; (8001228 <HAL_GPIO_Init+0x2bc>)
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_GPIO_Init+0x2d0>)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	492c      	ldr	r1, [pc, #176]	; (800123c <HAL_GPIO_Init+0x2d0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_GPIO_Init+0x2d0>)
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	43db      	mvns	r3, r3
 800119a:	4928      	ldr	r1, [pc, #160]	; (800123c <HAL_GPIO_Init+0x2d0>)
 800119c:	4013      	ands	r3, r2
 800119e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	4922      	ldr	r1, [pc, #136]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60cb      	str	r3, [r1, #12]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	491e      	ldr	r1, [pc, #120]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4918      	ldr	r1, [pc, #96]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4914      	ldr	r1, [pc, #80]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d021      	beq.n	8001240 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_GPIO_Init+0x2d0>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	490e      	ldr	r1, [pc, #56]	; (800123c <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]
 8001208:	e021      	b.n	800124e <HAL_GPIO_Init+0x2e2>
 800120a:	bf00      	nop
 800120c:	10320000 	.word	0x10320000
 8001210:	10310000 	.word	0x10310000
 8001214:	10220000 	.word	0x10220000
 8001218:	10210000 	.word	0x10210000
 800121c:	10120000 	.word	0x10120000
 8001220:	10110000 	.word	0x10110000
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40011000 	.word	0x40011000
 8001238:	40011400 	.word	0x40011400
 800123c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_GPIO_Init+0x304>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	43db      	mvns	r3, r3
 8001248:	4909      	ldr	r1, [pc, #36]	; (8001270 <HAL_GPIO_Init+0x304>)
 800124a:	4013      	ands	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	f47f ae8e 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e272      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x12c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e24c      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xbc>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fa8e 	bl	8000870 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fa8a 	bl	8000870 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e200      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe4>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fa7a 	bl	8000870 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fa76 	bl	8000870 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ec      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x10c>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c0      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4939      	ldr	r1, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa2f 	bl	8000870 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fa2b 	bl	8000870 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fa0e 	bl	8000870 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fa0a 	bl	8000870 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e180      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03a      	beq.n	80014f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff f9ee 	bl	8000870 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff f9ea 	bl	8000870 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e160      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fa9c 	bl	80019f4 <RCC_Delay>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff f9d4 	bl	8000870 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff f9d0 	bl	8000870 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e146      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a6 	beq.w	8001652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7e      	ldr	r2, [pc, #504]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff f991 	bl	8000870 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff f98d 	bl	8000870 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e103      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x334>
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x356>
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f941 	bl	8000870 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f93d 	bl	8000870 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0b1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x37e>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f92b 	bl	8000870 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f927 	bl	8000870 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e09b      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d061      	beq.n	800172c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d146      	bne.n	80016fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff f8fb 	bl	8000870 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff f8f7 	bl	8000870 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e06d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4921      	ldr	r1, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a19      	ldr	r1, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	430b      	orrs	r3, r1
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff f8cb 	bl	8000870 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff f8c7 	bl	8000870 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
 80016fc:	e035      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f8b4 	bl	8000870 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f8b0 	bl	8000870 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e026      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x498>
 800172a:	e01e      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e019      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x500>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d0      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0207 	bic.w	r2, r3, #7
 80017a2:	4965      	ldr	r1, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e073      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4936      	ldr	r1, [pc, #216]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f802 	bl	8000870 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7fe fffe 	bl	8000870 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d210      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff60 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	080034fc 	.word	0x080034fc
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e027      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	e027      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d010      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0c5b      	lsrs	r3, r3, #17
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e004      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	613b      	str	r3, [r7, #16]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ce:	613b      	str	r3, [r7, #16]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	693b      	ldr	r3, [r7, #16]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	007a1200 	.word	0x007a1200
 80019e8:	0800350c 	.word	0x0800350c
 80019ec:	0800351c 	.word	0x0800351c
 80019f0:	003d0900 	.word	0x003d0900

080019f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <RCC_Delay+0x34>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <RCC_Delay+0x38>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0a5b      	lsrs	r3, r3, #9
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a10:	bf00      	nop
  }
  while (Delay --);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	60fa      	str	r2, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <RCC_Delay+0x1c>
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	10624dd3 	.word	0x10624dd3

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e041      	b.n	8001ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fddc 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f001 f85c 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e041      	b.n	8001b64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d106      	bne.n	8001afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f839 	bl	8001b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f001 f80d 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_TIM_PWM_Start_DMA+0x2c>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e022      	b.n	8001bf2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d109      	bne.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x46>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	e015      	b.n	8001bf2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d109      	bne.n	8001be0 <HAL_TIM_PWM_Start_DMA+0x60>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e008      	b.n	8001bf2 <HAL_TIM_PWM_Start_DMA+0x72>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e153      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_TIM_PWM_Start_DMA+0x94>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e022      	b.n	8001c5a <HAL_TIM_PWM_Start_DMA+0xda>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d109      	bne.n	8001c2e <HAL_TIM_PWM_Start_DMA+0xae>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	e015      	b.n	8001c5a <HAL_TIM_PWM_Start_DMA+0xda>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d109      	bne.n	8001c48 <HAL_TIM_PWM_Start_DMA+0xc8>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e008      	b.n	8001c5a <HAL_TIM_PWM_Start_DMA+0xda>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d024      	beq.n	8001ca8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_TIM_PWM_Start_DMA+0xea>
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e119      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <HAL_TIM_PWM_Start_DMA+0xfe>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c7c:	e016      	b.n	8001cac <HAL_TIM_PWM_Start_DMA+0x12c>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d104      	bne.n	8001c8e <HAL_TIM_PWM_Start_DMA+0x10e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c8c:	e00e      	b.n	8001cac <HAL_TIM_PWM_Start_DMA+0x12c>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_PWM_Start_DMA+0x11e>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c9c:	e006      	b.n	8001cac <HAL_TIM_PWM_Start_DMA+0x12c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ca6:	e001      	b.n	8001cac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0fa      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	f200 80ae 	bhi.w	8001e10 <HAL_TIM_PWM_Start_DMA+0x290>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001cf1 	.word	0x08001cf1
 8001cc0:	08001e11 	.word	0x08001e11
 8001cc4:	08001e11 	.word	0x08001e11
 8001cc8:	08001e11 	.word	0x08001e11
 8001ccc:	08001d39 	.word	0x08001d39
 8001cd0:	08001e11 	.word	0x08001e11
 8001cd4:	08001e11 	.word	0x08001e11
 8001cd8:	08001e11 	.word	0x08001e11
 8001cdc:	08001d81 	.word	0x08001d81
 8001ce0:	08001e11 	.word	0x08001e11
 8001ce4:	08001e11 	.word	0x08001e11
 8001ce8:	08001e11 	.word	0x08001e11
 8001cec:	08001dc9 	.word	0x08001dc9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	4a6d      	ldr	r2, [pc, #436]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	4a6b      	ldr	r2, [pc, #428]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3334      	adds	r3, #52	; 0x34
 8001d14:	461a      	mov	r2, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	f7fe ff1c 	bl	8000b54 <HAL_DMA_Start_IT>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0bd      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d34:	60da      	str	r2, [r3, #12]
      break;
 8001d36:	e06e      	b.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	4a5a      	ldr	r2, [pc, #360]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	4a59      	ldr	r2, [pc, #356]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	f7fe fef8 	bl	8000b54 <HAL_DMA_Start_IT>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e099      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7c:	60da      	str	r2, [r3, #12]
      break;
 8001d7e:	e04a      	b.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	4a49      	ldr	r2, [pc, #292]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4a47      	ldr	r2, [pc, #284]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	333c      	adds	r3, #60	; 0x3c
 8001da4:	461a      	mov	r2, r3
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	f7fe fed4 	bl	8000b54 <HAL_DMA_Start_IT>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e075      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc4:	60da      	str	r2, [r3, #12]
      break;
 8001dc6:	e026      	b.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4a37      	ldr	r2, [pc, #220]	; (8001eac <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a36      	ldr	r2, [pc, #216]	; (8001eb0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3340      	adds	r3, #64	; 0x40
 8001dec:	461a      	mov	r2, r3
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	f7fe feb0 	bl	8000b54 <HAL_DMA_Start_IT>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e051      	b.n	8001ea2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e0c:	60da      	str	r2, [r3, #12]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
      break;
 8001e14:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d141      	bne.n	8001ea0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 faa0 	bl	800336a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_TIM_PWM_Start_DMA+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	08002a1d 	.word	0x08002a1d
 8001eb0:	08002ac5 	.word	0x08002ac5
 8001eb4:	0800298b 	.word	0x0800298b
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d855      	bhi.n	8001f84 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8001ed8:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001f15 	.word	0x08001f15
 8001ee4:	08001f85 	.word	0x08001f85
 8001ee8:	08001f85 	.word	0x08001f85
 8001eec:	08001f85 	.word	0x08001f85
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f85 	.word	0x08001f85
 8001ef8:	08001f85 	.word	0x08001f85
 8001efc:	08001f85 	.word	0x08001f85
 8001f00:	08001f4d 	.word	0x08001f4d
 8001f04:	08001f85 	.word	0x08001f85
 8001f08:	08001f85 	.word	0x08001f85
 8001f0c:	08001f85 	.word	0x08001f85
 8001f10:	08001f69 	.word	0x08001f69
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fe73 	bl	8000c14 <HAL_DMA_Abort_IT>
      break;
 8001f2e:	e02c      	b.n	8001f8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fe65 	bl	8000c14 <HAL_DMA_Abort_IT>
      break;
 8001f4a:	e01e      	b.n	8001f8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fe57 	bl	8000c14 <HAL_DMA_Abort_IT>
      break;
 8001f66:	e010      	b.n	8001f8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fe49 	bl	8000c14 <HAL_DMA_Abort_IT>
      break;
 8001f82:	e002      	b.n	8001f8a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
      break;
 8001f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 f9e6 	bl	800336a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d117      	bne.n	8001fd8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
 8001fbe:	f240 4344 	movw	r3, #1092	; 0x444
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_TIM_PWM_Stop_DMA+0x144>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	f240 4344 	movw	r3, #1092	; 0x444
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_PWM_Stop_DMA+0x144>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_TIM_PWM_Stop_DMA+0x154>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002016:	e013      	b.n	8002040 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b04      	cmp	r3, #4
 800201c:	d104      	bne.n	8002028 <HAL_TIM_PWM_Stop_DMA+0x164>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002026:	e00b      	b.n	8002040 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d104      	bne.n	8002038 <HAL_TIM_PWM_Stop_DMA+0x174>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002036:	e003      	b.n	8002040 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40012c00 	.word	0x40012c00

08002050 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e041      	b.n	80020e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f839 	bl	80020ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f000 fd4c 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_TIM_IC_Start+0x1a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e013      	b.n	8002142 <HAL_TIM_IC_Start+0x42>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d104      	bne.n	800212a <HAL_TIM_IC_Start+0x2a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e00b      	b.n	8002142 <HAL_TIM_IC_Start+0x42>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d104      	bne.n	800213a <HAL_TIM_IC_Start+0x3a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e003      	b.n	8002142 <HAL_TIM_IC_Start+0x42>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_TIM_IC_Start+0x54>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e013      	b.n	800217c <HAL_TIM_IC_Start+0x7c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d104      	bne.n	8002164 <HAL_TIM_IC_Start+0x64>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e00b      	b.n	800217c <HAL_TIM_IC_Start+0x7c>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d104      	bne.n	8002174 <HAL_TIM_IC_Start+0x74>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e003      	b.n	800217c <HAL_TIM_IC_Start+0x7c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217a:	b2db      	uxtb	r3, r3
 800217c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06d      	b.n	800226a <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_TIM_IC_Start+0x9e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800219c:	e013      	b.n	80021c6 <HAL_TIM_IC_Start+0xc6>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d104      	bne.n	80021ae <HAL_TIM_IC_Start+0xae>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ac:	e00b      	b.n	80021c6 <HAL_TIM_IC_Start+0xc6>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d104      	bne.n	80021be <HAL_TIM_IC_Start+0xbe>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021bc:	e003      	b.n	80021c6 <HAL_TIM_IC_Start+0xc6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_IC_Start+0xd6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d4:	e013      	b.n	80021fe <HAL_TIM_IC_Start+0xfe>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_IC_Start+0xe6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e4:	e00b      	b.n	80021fe <HAL_TIM_IC_Start+0xfe>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_IC_Start+0xf6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f4:	e003      	b.n	80021fe <HAL_TIM_IC_Start+0xfe>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f8af 	bl	800336a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_TIM_IC_Start+0x174>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00e      	beq.n	8002234 <HAL_TIM_IC_Start+0x134>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221e:	d009      	beq.n	8002234 <HAL_TIM_IC_Start+0x134>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_TIM_IC_Start+0x178>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_TIM_IC_Start+0x134>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_TIM_IC_Start+0x17c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d111      	bne.n	8002258 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d010      	beq.n	8002268 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002256:	e007      	b.n	8002268 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800

08002280 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <HAL_TIM_IC_Start_IT+0x1e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e013      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x46>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_IC_Start_IT+0x2e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	e00b      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x46>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d104      	bne.n	80022be <HAL_TIM_IC_Start_IT+0x3e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e003      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x46>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <HAL_TIM_IC_Start_IT+0x58>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e013      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x80>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d104      	bne.n	80022e8 <HAL_TIM_IC_Start_IT+0x68>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e00b      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x80>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d104      	bne.n	80022f8 <HAL_TIM_IC_Start_IT+0x78>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e003      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x80>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0b8      	b.n	8002484 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0xa2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002320:	e013      	b.n	800234a <HAL_TIM_IC_Start_IT+0xca>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0xb2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	e00b      	b.n	800234a <HAL_TIM_IC_Start_IT+0xca>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0xc2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	e003      	b.n	800234a <HAL_TIM_IC_Start_IT+0xca>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_TIM_IC_Start_IT+0xda>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002358:	e013      	b.n	8002382 <HAL_TIM_IC_Start_IT+0x102>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d104      	bne.n	800236a <HAL_TIM_IC_Start_IT+0xea>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	e00b      	b.n	8002382 <HAL_TIM_IC_Start_IT+0x102>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d104      	bne.n	800237a <HAL_TIM_IC_Start_IT+0xfa>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002378:	e003      	b.n	8002382 <HAL_TIM_IC_Start_IT+0x102>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d841      	bhi.n	800240c <HAL_TIM_IC_Start_IT+0x18c>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_TIM_IC_Start_IT+0x110>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023c5 	.word	0x080023c5
 8002394:	0800240d 	.word	0x0800240d
 8002398:	0800240d 	.word	0x0800240d
 800239c:	0800240d 	.word	0x0800240d
 80023a0:	080023d7 	.word	0x080023d7
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	0800240d 	.word	0x0800240d
 80023ac:	0800240d 	.word	0x0800240d
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	0800240d 	.word	0x0800240d
 80023b8:	0800240d 	.word	0x0800240d
 80023bc:	0800240d 	.word	0x0800240d
 80023c0:	080023fb 	.word	0x080023fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0202 	orr.w	r2, r2, #2
 80023d2:	60da      	str	r2, [r3, #12]
      break;
 80023d4:	e01d      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0204 	orr.w	r2, r2, #4
 80023e4:	60da      	str	r2, [r3, #12]
      break;
 80023e6:	e014      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0208 	orr.w	r2, r2, #8
 80023f6:	60da      	str	r2, [r3, #12]
      break;
 80023f8:	e00b      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0210 	orr.w	r2, r2, #16
 8002408:	60da      	str	r2, [r3, #12]
      break;
 800240a:	e002      	b.n	8002412 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	bf00      	nop
  }

  if (status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d134      	bne.n	8002482 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 ffa2 	bl	800336a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_TIM_IC_Start_IT+0x20c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_TIM_IC_Start_IT+0x1ce>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d009      	beq.n	800244e <HAL_TIM_IC_Start_IT+0x1ce>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_TIM_IC_Start_IT+0x210>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_TIM_IC_Start_IT+0x1ce>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_TIM_IC_Start_IT+0x214>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d111      	bne.n	8002472 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d010      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	e007      	b.n	8002482 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e088      	b.n	80025c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f000 fda6 	bl	8003024 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020c 	bic.w	r2, r2, #12
 80024e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6999      	ldr	r1, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	619a      	str	r2, [r3, #24]
 80024fa:	e060      	b.n	80025be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d11c      	bne.n	800253c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f000 fe0f 	bl	8003134 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002524:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6999      	ldr	r1, [r3, #24]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	e040      	b.n	80025be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11b      	bne.n	800257a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f000 fe5a 	bl	800320a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020c 	bic.w	r2, r2, #12
 8002564:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69d9      	ldr	r1, [r3, #28]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	61da      	str	r2, [r3, #28]
 8002578:	e021      	b.n	80025be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d11c      	bne.n	80025ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f000 fe76 	bl	8003280 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69d9      	ldr	r1, [r3, #28]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	61da      	str	r2, [r3, #28]
 80025b8:	e001      	b.n	80025be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ae      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	f200 809f 	bhi.w	800273c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002639 	.word	0x08002639
 8002608:	0800273d 	.word	0x0800273d
 800260c:	0800273d 	.word	0x0800273d
 8002610:	0800273d 	.word	0x0800273d
 8002614:	08002679 	.word	0x08002679
 8002618:	0800273d 	.word	0x0800273d
 800261c:	0800273d 	.word	0x0800273d
 8002620:	0800273d 	.word	0x0800273d
 8002624:	080026bb 	.word	0x080026bb
 8002628:	0800273d 	.word	0x0800273d
 800262c:	0800273d 	.word	0x0800273d
 8002630:	0800273d 	.word	0x0800273d
 8002634:	080026fb 	.word	0x080026fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fad6 	bl	8002bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6999      	ldr	r1, [r3, #24]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	619a      	str	r2, [r3, #24]
      break;
 8002676:	e064      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fb1c 	bl	8002cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	021a      	lsls	r2, r3, #8
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	619a      	str	r2, [r3, #24]
      break;
 80026b8:	e043      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fb65 	bl	8002d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0208 	orr.w	r2, r2, #8
 80026d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69d9      	ldr	r1, [r3, #28]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]
      break;
 80026f8:	e023      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fbaf 	bl	8002e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69d9      	ldr	r1, [r3, #28]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	021a      	lsls	r2, r3, #8
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	61da      	str	r2, [r3, #28]
      break;
 800273a:	e002      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
      break;
 8002740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIM_ConfigClockSource+0x1c>
 800276c:	2302      	movs	r3, #2
 800276e:	e0b4      	b.n	80028da <HAL_TIM_ConfigClockSource+0x186>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800278e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a8:	d03e      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0xd4>
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	f200 8087 	bhi.w	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	f000 8086 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x172>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d87f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d01a      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xa6>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d87b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d050      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x11a>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d877      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d03c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xfa>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d873      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d058      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x13a>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d86f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d064      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d86b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d060      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d867      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d05a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	e062      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f000 fd8f 	bl	800332c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	609a      	str	r2, [r3, #8]
      break;
 8002826:	e04f      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f000 fd78 	bl	800332c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284a:	609a      	str	r2, [r3, #8]
      break;
 800284c:	e03c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 fc3c 	bl	80030d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2150      	movs	r1, #80	; 0x50
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd46 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 800286c:	e02c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 fc96 	bl	80031ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2160      	movs	r1, #96	; 0x60
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fd36 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 800288c:	e01c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 fc1c 	bl	80030d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fd26 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 80028ac:	e00c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fd1d 	bl	80032f8 <TIM_ITRx_SetConfig>
      break;
 80028be:	e003      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e031      	b.n	800295e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 faf7 	bl	8002f00 <TIM_SlaveTimer_SetConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e018      	b.n	800295e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800294a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b0:	e02a      	b.n	8002a08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d107      	bne.n	80029cc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2202      	movs	r2, #2
 80029c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ca:	e01d      	b.n	8002a08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d107      	bne.n	80029e6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2204      	movs	r2, #4
 80029da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e4:	e010      	b.n	8002a08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2208      	movs	r2, #8
 80029f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029fe:	e003      	b.n	8002a08 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff ffb5 	bl	8002978 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d10b      	bne.n	8002a4c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d136      	bne.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a4a:	e031      	b.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10b      	bne.n	8002a6e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d125      	bne.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6c:	e020      	b.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10b      	bne.n	8002a90 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8e:	e00f      	b.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d10a      	bne.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7fd fe4d 	bl	8000750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d103      	bne.n	8002ae4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	771a      	strb	r2, [r3, #28]
 8002ae2:	e019      	b.n	8002b18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d103      	bne.n	8002af6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	771a      	strb	r2, [r3, #28]
 8002af4:	e010      	b.n	8002b18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d103      	bne.n	8002b08 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2204      	movs	r2, #4
 8002b04:	771a      	strb	r2, [r3, #28]
 8002b06:	e007      	b.n	8002b18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d102      	bne.n	8002b18 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff ff24 	bl	8002966 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <TIM_Base_SetConfig+0xb8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <TIM_Base_SetConfig+0x30>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x30>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <TIM_Base_SetConfig+0xbc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x30>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <TIM_Base_SetConfig+0xc0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <TIM_Base_SetConfig+0xb8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0x62>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <TIM_Base_SetConfig+0xbc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <TIM_Base_SetConfig+0xc0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <TIM_Base_SetConfig+0xb8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800

08002bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0201 	bic.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0308 	bic.w	r3, r3, #8
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d111      	bne.n	8002c92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012c00 	.word	0x40012c00

08002cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0320 	bic.w	r3, r3, #32
 8002d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <TIM_OC2_SetConfig+0xd0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10d      	bne.n	8002d38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <TIM_OC2_SetConfig+0xd0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d113      	bne.n	8002d68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00

08002d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <TIM_OC3_SetConfig+0xd0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10d      	bne.n	8002e0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <TIM_OC3_SetConfig+0xd0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d113      	bne.n	8002e3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	031b      	lsls	r3, r3, #12
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <TIM_OC4_SetConfig+0x98>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d109      	bne.n	8002ed8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	40012c00 	.word	0x40012c00

08002f00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b70      	cmp	r3, #112	; 0x70
 8002f48:	d01a      	beq.n	8002f80 <TIM_SlaveTimer_SetConfig+0x80>
 8002f4a:	2b70      	cmp	r3, #112	; 0x70
 8002f4c:	d860      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f4e:	2b60      	cmp	r3, #96	; 0x60
 8002f50:	d054      	beq.n	8002ffc <TIM_SlaveTimer_SetConfig+0xfc>
 8002f52:	2b60      	cmp	r3, #96	; 0x60
 8002f54:	d85c      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f56:	2b50      	cmp	r3, #80	; 0x50
 8002f58:	d046      	beq.n	8002fe8 <TIM_SlaveTimer_SetConfig+0xe8>
 8002f5a:	2b50      	cmp	r3, #80	; 0x50
 8002f5c:	d858      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d019      	beq.n	8002f96 <TIM_SlaveTimer_SetConfig+0x96>
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d854      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f66:	2b30      	cmp	r3, #48	; 0x30
 8002f68:	d055      	beq.n	8003016 <TIM_SlaveTimer_SetConfig+0x116>
 8002f6a:	2b30      	cmp	r3, #48	; 0x30
 8002f6c:	d850      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d051      	beq.n	8003016 <TIM_SlaveTimer_SetConfig+0x116>
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d84c      	bhi.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04d      	beq.n	8003016 <TIM_SlaveTimer_SetConfig+0x116>
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d04b      	beq.n	8003016 <TIM_SlaveTimer_SetConfig+0x116>
 8002f7e:	e047      	b.n	8003010 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f000 f9cc 	bl	800332c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002f94:	e040      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d101      	bne.n	8002fa2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e03b      	b.n	800301a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a1a      	ldr	r2, [r3, #32]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
      break;
 8002fe6:	e017      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f000 f86f 	bl	80030d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002ffa:	e00d      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	461a      	mov	r2, r3
 800300a:	f000 f8cf 	bl	80031ac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800300e:	e003      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
      break;
 8003014:	e000      	b.n	8003018 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003016:	bf00      	nop
  }

  return status;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f023 0201 	bic.w	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <TIM_TI1_SetConfig+0xa8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00b      	beq.n	800306a <TIM_TI1_SetConfig+0x46>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d007      	beq.n	800306a <TIM_TI1_SetConfig+0x46>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <TIM_TI1_SetConfig+0xac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_TI1_SetConfig+0x46>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <TIM_TI1_SetConfig+0xb0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <TIM_TI1_SetConfig+0x4a>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <TIM_TI1_SetConfig+0x4c>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e003      	b.n	800308e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	b2db      	uxtb	r3, r3
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f023 030a 	bic.w	r3, r3, #10
 80030a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 030a 	and.w	r3, r3, #10
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800

080030d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 030a 	bic.w	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	b29b      	uxth	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0210 	bic.w	r2, r3, #16
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	031b      	lsls	r3, r3, #12
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	621a      	str	r2, [r3, #32]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	b2db      	uxtb	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	031b      	lsls	r3, r3, #12
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	031b      	lsls	r3, r3, #12
 80032d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	f043 0307 	orr.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	431a      	orrs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2201      	movs	r2, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	431a      	orrs	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e046      	b.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d009      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a10      	ldr	r2, [pc, #64]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10c      	bne.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	2600      	movs	r6, #0
 8003474:	4d0c      	ldr	r5, [pc, #48]	; (80034a8 <__libc_init_array+0x38>)
 8003476:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <__libc_init_array+0x3c>)
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	f000 f822 	bl	80034c8 <_init>
 8003484:	2600      	movs	r6, #0
 8003486:	4d0a      	ldr	r5, [pc, #40]	; (80034b0 <__libc_init_array+0x40>)
 8003488:	4c0a      	ldr	r4, [pc, #40]	; (80034b4 <__libc_init_array+0x44>)
 800348a:	1b64      	subs	r4, r4, r5
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f855 3b04 	ldr.w	r3, [r5], #4
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08003520 	.word	0x08003520
 80034ac:	08003520 	.word	0x08003520
 80034b0:	08003520 	.word	0x08003520
 80034b4:	08003524 	.word	0x08003524

080034b8 <memset>:
 80034b8:	4603      	mov	r3, r0
 80034ba:	4402      	add	r2, r0
 80034bc:	4293      	cmp	r3, r2
 80034be:	d100      	bne.n	80034c2 <memset+0xa>
 80034c0:	4770      	bx	lr
 80034c2:	f803 1b01 	strb.w	r1, [r3], #1
 80034c6:	e7f9      	b.n	80034bc <memset+0x4>

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
